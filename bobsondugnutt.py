# -*- coding: utf-8 -*-
"""bobsonDugnutt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fLuQABasVMjikJRZX4XGZzLFDJb55mAQ
"""

import numpy as np
import os
import glob
import string

def addLetter(s):
    """Add letter to a string in a random place"""
    lower_upper_alphabet = string.ascii_letters
    random_letter = np.random.choice(list(lower_upper_alphabet))
    x = np.random.randint(0,len(s))
    newstring = s[:x] + random_letter + s[x:]
    return newstring

def removeLetter(s):
    """removes a random letter from a string"""
    x = np.random.randint(0,len(s))
    return s.replace(s[x], '')

def switchLetter(s):
    '''swaps out one letter for another randomly'''
    lower_upper_alphabet = string.ascii_letters
    random_letter = np.random.choice(list(lower_upper_alphabet))
    x = np.random.randint(0,len(s))
    return s.replace(s[x], random_letter)

def mash(word1, word2):
    """mash two words together"""
    x = np.random.randint(0,len(word1))
    y = np.random.randint(0,len(word2))
    a1, b1 = word1[:x], word1[x:]
    a2, b2 = word2[:y], word2[y:]
    return a1+b2, a2+b1

def levenshtein_ratio_and_distance(s, t, ratio_calc = True):
    """ levenshtein_ratio_and_distance:
        Calculates levenshtein distance between two strings.
        If ratio_calc = True, the function computes the
        levenshtein distance ratio of similarity between two strings
        For all i and j, distance[i,j] will contain the Levenshtein
        distance between the first i characters of s and the
        first j characters of t
    """
    # Initialize matrix of zeros
    rows = len(s)+1
    cols = len(t)+1
    distance = np.zeros((rows,cols),dtype = int)

    # Populate matrix of zeros with the indeces of each character of both strings
    for i in range(1, rows):
        for k in range(1,cols):
            distance[i][0] = i
            distance[0][k] = k

    # Iterate over the matrix to compute the cost of deletions,insertions and/or substitutions    
    for col in range(1, cols):
        for row in range(1, rows):
            if s[row-1] == t[col-1]:
                cost = 0 # If the characters are the same in the two strings in a given position [i,j] then the cost is 0
            else:
                # In order to align the results with those of the Python Levenshtein package, if we choose to calculate the ratio
                # the cost of a substitution is 2. If we calculate just distance, then the cost of a substitution is 1.
                if ratio_calc == True:
                    cost = 2
                else:
                    cost = 1
            distance[row][col] = min(distance[row-1][col] + 1,      # Cost of deletions
                                 distance[row][col-1] + 1,          # Cost of insertions
                                 distance[row-1][col-1] + cost)     # Cost of substitutions
    Ratio = ((len(s)+len(t)) - distance[row][col]) / (len(s)+len(t))
    return Ratio

def singleDraw(s):
    '''take one name, make edits, return the most similar name to the original'''
    stringList = [addLetter(s), removeLetter(s), switchLetter(s)]
    numList = [levenshtein_ratio_and_distance(i,s) for i in stringList]
    a = numList.index(max(numList))
    return stringList[a]

def doubleDraw(a,b):
    '''take two names, mash them, return the most similar name to the original'''
    c, d = mash(a,b)
    results = [d,c]
    values = [levenshtein_ratio_and_distance(a,d), levenshtein_ratio_and_distance(b,c)]
    b = values.index(max(values))
    return results[b]

first_names = []
last_names = []

cwd = os.getcwd()
pathname = cwd+"/name_data"
files = glob.glob(pathname+"/*.txt")

for name in files: 
    try: 
        with open(name) as f: 
            for line in f:
                first_names.append(line.strip().split()[0])
                last_names.append(line.strip().split()[-1])
    except:
        continue

first_names = list(set(first_names))
last_names = list(set(last_names))

C = [singleDraw(c).lower() for c in np.random.choice(first_names, 4)]
ln_array1 = np.random.choice(last_names, 8)
ln_array2 = np.random.choice(last_names, 8)
D = [doubleDraw(ln_array2[i], ln_array1[i]).lower() for i in range(len(ln_array2))]

newFirst = [g.capitalize() for g in C+[name for name in np.random.choice(first_names, 4)]]
newLast = [h.capitalize() for h in D]

f = open(pathname+"/new-names.txt", "a")
if len(newFirst)==len(newLast):
    for i in range(len(newLast)):
        print(newFirst[i]+' '+newLast[i])
        x = input("add to favourites?")
        if x == 'y':
            f.write(newFirst[i]+' '+newLast[i]+'\n')
        else:
            continue
f.close()

